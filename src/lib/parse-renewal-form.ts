/**
 * Utility to parse renewal form responses from SheepCRM
 */

import { FormResponse, RenewalFormSubmission } from '@/types/sheepcrm'

/**
 * Parse form response data into structured renewal submission
 */
export function parseRenewalFormResponse(formResponse: FormResponse): RenewalFormSubmission {
  const { data } = formResponse
  const response = data.response

  // Log ALL response fields to help debug field name mismatches
  console.log('[parse-renewal-form] ALL RESPONSE FIELDS:')
  Object.keys(response).forEach(key => {
    console.log(`  ${key}: ${response[key]}`)
  })

  // Extract organization and contact information
  const organizationUri = data.context_ref?.[0]?.ref || ''
  const organizationName = data.context_ref?.[0]?.display_value || ''
  const contactUri = data.contact_ref.ref
  const contactName = data.contact_ref.display_value

  // Parse certificate counts from form responses
  // Field names are dynamically generated by SheepCRM, so search by suffix
  // Negative values are treated as 0 (happens when users accidentally scroll number inputs)
  const findFieldValue = (suffix: string): number => {
    const fieldKey = Object.keys(response).find(key => key.endsWith(suffix))
    if (!fieldKey) return 0
    const value = response[fieldKey]
    const parsed = parseInt(String(value || '0')) || 0
    const result = Math.max(0, parsed) // Treat negative values as 0

    // Debug logging to help diagnose field matching issues
    if (result > 0) {
      console.log(`[parse-renewal-form] Found ${suffix}: ${result} (field: ${fieldKey})`)
    }

    return result
  }

  // Standard courses
  const efaw = findFieldValue('.efaw')
  const faw = findFieldValue('.faw')
  const fawr = findFieldValue('.fawr-requalification') || findFieldValue('.fawr')
  const pfa = findFieldValue('.pfa')
  const emergencyPfa = findFieldValue('.emergency-pfa') || findFieldValue('.epfa')
  const outdoorFirstAid = findFieldValue('.outdoor-first-aid')
  const emergencyOutdoorFirstAid = findFieldValue('.emergency-outdoor-first-aid')

  // Combined courses (try multiple separator formats: +, -, and no separator)
  const fawPfa = findFieldValue('.faw+pfa') || findFieldValue('.faw-+-pfa') || findFieldValue('.faw-pfa')
  const fawEpfa = findFieldValue('.faw+epfa') || findFieldValue('.faw-+-epfa') || findFieldValue('.faw-epfa')
  const efawEpfa = findFieldValue('.efaw+epfa') || findFieldValue('.efaw-+-epfa') || findFieldValue('.efaw-epfa')
  const pfaEfaw = findFieldValue('.pfa+efaw') || findFieldValue('.pfa-+-efaw') || findFieldValue('.pfa-efaw')

  // Refresher and specialized courses
  const firstAidAnnualRefresher = findFieldValue('.first-aid-annual-refresher')
  const blsAed = findFieldValue('.bls+aed') || findFieldValue('.bls-+-aed') || findFieldValue('.bls-aed') || findFieldValue('.blsaed')

  // Forestry courses (try + separator as well)
  const fawForestry = findFieldValue('.faw+forestry') || findFieldValue('.faw-forestry')
  const efawForestry = findFieldValue('.efaw+forestry') || findFieldValue('.efaw-forestry')
  const forestSchoolsFirstAid = findFieldValue('.forest-schools-first-aid')
  const emergencyForestSchoolsFirstAid = findFieldValue('.emergency-forest-schools-first-aid')

  const totalCertificates = efaw + faw + fawr + pfa + emergencyPfa + outdoorFirstAid + emergencyOutdoorFirstAid +
    fawPfa + fawEpfa + efawEpfa + pfaEfaw +
    firstAidAnnualRefresher + blsAed +
    fawForestry + efawForestry + forestSchoolsFirstAid + emergencyForestSchoolsFirstAid

  console.log(`[parse-renewal-form] Total certificates: ${totalCertificates}`)

  // Parse trainer information using dynamic field matching
  const findFieldString = (suffix: string): string => {
    const fieldKey = Object.keys(response).find(key => key.endsWith(suffix))
    if (!fieldKey) return ''
    return String(response[fieldKey] || '')
  }

  const numberOfTrainersStr = findFieldString('how-many-trainerassessors-do-you-want-to-renew-this-year') || '0'
  const numberOfTrainers = parseInt(numberOfTrainersStr) || 0

  // Parse trainer names from the text field
  const trainerNamesField = Object.keys(response).find(key =>
    key.includes('trainers') && key.includes('names') ||
    key.includes('list-their-names-and-emails')
  )
  const trainerNamesValue = trainerNamesField ? response[trainerNamesField] : []
  const trainerNames: string[] = Array.isArray(trainerNamesValue)
    ? trainerNamesValue
    : [trainerNamesValue].filter(Boolean)

  // Parse blended courses
  const hasBlendedCourses = findFieldString('do-you-run-blended-courses') === 'yes'

  // Parse compliance checkboxes using dynamic field matching
  const findFieldArray = (partialKey: string): string[] => {
    const fieldKey = Object.keys(response).find(key => key.includes(partialKey))
    if (!fieldKey) return []
    return ensureArray(response[fieldKey])
  }

  const adminSystemRecords = findFieldArray('administrative-system')
  const certificateContains = findFieldArray('certificate-you-issue')
  const trainerPortfolioItems = findFieldArray('portfolio-for-every-trainerassessor')
  const qualityAssuranceCovers = findFieldArray('quality-assurance-cover')
  const teachingMaterialsUsed = findFieldArray('acceptable-teaching-materials')

  return {
    formResponseUri: formResponse.uri,
    organizationUri,
    organizationName,
    contactUri,
    contactName,

    certificateCounts: {
      efaw,
      faw,
      fawr,
      pfa,
      emergencyPfa,
      outdoorFirstAid,
      emergencyOutdoorFirstAid,
      fawPfa,
      fawEpfa,
      efawEpfa,
      pfaEfaw,
      firstAidAnnualRefresher,
      blsAed,
      fawForestry,
      efawForestry,
      forestSchoolsFirstAid,
      emergencyForestSchoolsFirstAid,
      total: totalCertificates
    },

    numberOfTrainers,
    trainerNames,

    hasBlendedCourses,
    adminSystemRecords,
    certificateContains,
    trainerPortfolioItems,
    qualityAssuranceCovers,
    teachingMaterialsUsed,

    rawResponse: response
  }
}

/**
 * Ensure value is an array
 */
function ensureArray(value: any): string[] {
  if (Array.isArray(value)) {
    return value
  }
  if (typeof value === 'string' && value.length > 0) {
    return [value]
  }
  return []
}
